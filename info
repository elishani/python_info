Mutable
print(id(result)

print("mississppi".count("iss")  # show 2
print("mississppi".count("issi")  # show 1

for part in parts:
  print ("{0}: {1}".format(parts.index(part) + 1, part))
  
  enumerate
for number in enumerate(parts):
  print ("{0}: {1}".format(number + 1, part))
  
 for index, character in enumerate("abcdefgh"):
  print(index, character)
  
  available_parts = [ "computer", "monitor", keyboard", mouse"]
  valid_choices = [str(i) for i in range(1, len(available_parts) + 1)]
  print(valid_choices)
  
  Same as 
  
   valid_choices = []
   for i in range(1, len(available_parts) + 1):
    valid_choices.append(str(1))
  
  List
  a = [1, 6, 5, 3, 4]
  a.sort(reverse=True)
  
  Built-in Functions

sorted_numbers = sorted(numbers)
numbers.sort()

# create new list
missing_letter = sorted("The quick btown fox jumped over the lazy dog")
print(missing_letter)

missing_letter = sorted("The quick btown fox jumped over the lazy dog", key=str.casefold)
print(missing_letter)

names = [ "John", "terry", "eric" "Terry", "michael"]
names.sort(key=str.casefold)
print(names)

#convert to number
digits = list("43295617")
print(digits)

more_numbers = list(numbers)
print(numbers is more_numbers)  # False
print(numbers == more_numbers)  # True

more_numbers = numbers[:]  # other way to copy list
more_numbers = numbers.copy()  # other way to copy list

# Replacing slice 
computer _parts[3:] = ["trackball]

# Option 1

data = [ 4, 5, 104, 105, 350, 360]
min_valid = 100
max_valid = 200
for index, value in enumerate(data):
  if (value < min_valid) or (value > max_valid):
    del data[index]
    index -= 1
 
 # Option 2
 
data = [ 4, 5, 104, 105, 350, 360]
min_valid = 100
max_valid = 200
stop = 0
for index, value in enumerate(data):
  if value >=  min_valid:
    stop = index
    break
 del data[:stop]
 print(data)
 
 start = 0
 for index in range(len(data) - 1 , - 1 - 1):
  if data[index] <= max_valid:
    start = index + 1 
    break
del data[start:]
print(data)
 
 for index in range(len(data) - 1 , - 1 - 1):
  if data[index] <= max_valid or data[index] > max_valid:
    print(index, data)
    del data[index]
print(data) 

#Revers order 
for index , value in enumertate(reversed(data)):
  print(index, value)
  print(data)
  
top_idex = len(data) - 1
for index, value in enumertate(reversed(data)):
  if value < min_valid or value > max_valid:
    print(top_index - index, value)
    del data[top_index - index]
print(data)

import timeit  # for checking time take to run

# Convert number list to number
value_list = [11, 22, 33, 44]
for index in range(len(value_list)):
  values_list[index] = int(values_list[index])
print(value_list)

#Tuple same
t = "a", "b", "c"
t = ("a", "b", "c")

name = "eli"
age = 20
print(name, age, "Python", 2022)
print((name, age, "Python", 2022))  #tuple

# Unpacking a Tuple
#failed
data_list = [12, 13, 14]
data_list.append(15)
p, q, r = data_list
print(p)
print(q)
print(r)
  

 
